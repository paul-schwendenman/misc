#!/usr/bin/python2.7

import httplib
import urllib
import sys
import os.path


class MinifyException(Exception):
    def __init__(self, message=None):
        self.message = message
        super(MinifyException, self).__init__(self.message)

    def __repr__(self):
        return self.message


class Filename():
    def __init__(self, filename):
        path, file = os.path.split(filename)
        self._oldname = filename
        file_parts = file.split('.')
        self._name = file_parts[0]
        self._nparts = len(file_parts)
        self._path = path
        if len(file_parts) > 1:
            self._extension = file_parts[-1]
        else:
            self._extension = ''
        self._new = ''

    def isJs(self):
        '''Return true if file has js extension'''
        return self._extension == 'js'

    def isMinifiable(self):
        ''' As a convention this program will ignore all files of the format
        "name.<string>.js." This serves two purposes.  One, we ignore
        already minified js files (i.e name.min.js).  And two, we allow for
        the creation of file named, for example name.max.js, that should not
        be minified.'''
        return self.isJs() and (self._nparts == 2)

    def isUpToDate(self):
        '''Check time stamps to see if output file is 'newer' than the input'''
        try:
            return os.path.getmtime(self.getNewName()) > \
                   os.path.getmtime(self._oldname)
        except OSError:
            return 0

    def getOriginal(self):
        '''Return the original filename'''
        return self._oldname

    def getNewName(self):
        '''Make the new filename and 'cache' the result'''
        if not self._new:
            self._new = os.path.join(self._path, self._name + '.min.js')
        return self._new


def read(filename):
    '''
    Read the file and return content
    '''
    try:
        with open(filename, 'r') as f:
            data = f.read()
    except IOError:
        output = ('', 1)
    else:
        output = (data, 0)
    finally:
        return output


def write(filename, input):
    '''
    Write input to the file
    '''
    try:
        with open(filename, 'w') as f:
            f.write(input)
    except IOError:
        status = 3
    else:
        status = 0
    finally:
        return status


def sendreceive(input, num):
    '''
    This function should send the JavaScript file to the API and
    return the result
    '''
    try:
        compiler_level = ['WHITESPACE_ONLY', 'SIMPLE_OPTIMIZATIONS',
            'ADVANCED_OPTIMIZATIONS']
        params = urllib.urlencode([
            ('js_code', input),
            ('compilation_level', compiler_level[num]),
            ('output_format', 'text'),
            ('output_info', 'compiled_code'),
          ])

        headers = {"Content-type": "application/x-www-form-urlencoded"}
        conn = httplib.HTTPConnection('closure-compiler.appspot.com')
        conn.request('POST', '/compile', params, headers)
        response = conn.getresponse()
        data = response.read()
    except (IOError, ValueError, UnicodeError, TypeError):
        output = ('', 2)
    else:
        output = (data, 0)
    finally:
        conn.close()
        return output


def manpage():
    print "usage: minify [-c COMPILER_LEVEL] [-f] file [file ...]"
    print "\t-c, --compiler-level COMPILER_LEVEL"
    print "\t\t0: White space removal only"
    print "\t\t1: Simple Optimizations (default)"
    print "\t\t2: Advanced Optimizations"
    print "\t-f, --force"
    print "\t\t Force the evaluation of js files, i.e ignore"
    print "\t\t the modification date"
    print "\t-v, --verbose"
    print "\t-h, --help"
    print
    print "Examples:"
    print "\tminify -c 2 -f static/this.js"
    print "\tminify -vf ../that.js"
    print "\tminify static/*"


def main(filename, num, force=0, verbose=0):
    file = Filename(filename)

    print "%s..." % filename,
    sys.stdout.flush()
    if file.isMinifiable():
        if not force and file.isUpToDate():
            print "up-to-date"
            status = -3
        else:
            if verbose:
                print
            # Read the input
            if verbose:
                print "\treading file...",
            content, status = read(file.getOriginal())
            if verbose and status == 1:
                print "IO error"
            elif verbose:
                print "done"

            # Process the input
            if status == 0:
                if verbose:
                    print "\tprocessing file...",
                data, status = sendreceive(content, num)
                if verbose and status != 0:
                    print "connection error"
                elif verbose:
                    print "done"

            # Write the output
            if status == 0:
                if verbose:
                    print "\twriting output file...",
                status = write(file.getNewName(), data)
                if verbose and status != 0:
                    print "IO error"
                elif verbose:
                    print "done"

            # Print status
            if not verbose and status != 0:
                print "failed"
            elif not verbose:
                print "done"
    elif not file.isJs():
        print "not javascript file"
        status = -1
    else:
        print "skipped"
        status = -2
    return status

if __name__ == '__main__':
    # Defaults
    COMPILER_LEVEL = 1
    FORCE = False
    VERBOSE = False

    args = sys.argv[1:]

    try:
        for n, arg in enumerate(sys.argv):
            if arg == '-c' or arg == '--compiler-level':
                try:
                    value = int(sys.argv[n + 1])
                except ValueError:
                    raise MinifyException('No compilation number')
                args.remove(sys.argv[n + 1])
                if value not in (0, 1, 2):
                    raise MinifyException("Invalid compilation number")
                COMPILER_LEVEL = value
                args.remove(arg)
            elif arg == '-f' or arg == '--force':
                FORCE = True
                args.remove(arg)
            elif arg == '-v' or arg == '--verbose':
                VERBOSE = True
                args.remove(arg)
            elif arg == '-h' or arg == '--help':
                args = []
            elif arg[0] == '-':
                args.remove(arg)
                for char in arg[1:]:
                    if 'v' == char:
                        VERBOSE = True
                    elif 'f' == char:
                        FORCE = True
                    else:
                        raise MinifyException('Invalid flag')

        status = [main(filename, COMPILER_LEVEL, FORCE, VERBOSE)
                  for filename in args]

        if VERBOSE:
            print "non js:", status.count(-1),
            print "Skipped:", status.count(-2),
            print "Up-to-date:", status.count(-3),
            print "Failed:", status.count(1) + status.count(2) + \
                  status.count(3),
            print "Done:", status.count(0),
            print "Total:", len(status)
        if len(args) == 0:
            manpage()
    except MinifyException as e:
        if VERBOSE:
            print "Error occurred:", e
        manpage()
